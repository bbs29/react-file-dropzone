{"version":3,"sources":["file-dropzone/File-Dropzone.tsx","progress/Progress.tsx","App.service.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["FileDropzoneComponent","props","fileInputRef","React","highlight","setHighlight","className","disabled","onDragOver","e","preventDefault","onDragLeave","onDrop","dataTransfer","files","onFilesAdded","Array","from","ref","el","type","accept","multiple","onChange","target","onClick","click","style","cursor","validationMessages","length","map","message","index","key","ProgressComponent","width","progress","ApiService","axios","create","baseURL","uploadFile","file","progressCb","a","config","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","name","formData","FormData","append","post","App","useState","setFiles","uploadProgress","setUploadProgress","onFileUploadProgress","fileName","_files","_fileIndex","findIndex","f","status","renderFileUploadStatus","color","splice","onFileRemoveClick","newFiles","some","_f","push","filterUniqueFiles","maxHeight","overflowY","maxWidth","_notCompletedFiles","filter","Promise","allSettled","response","then","results","result","value","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.31a5f4ba.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./File-Dropzone.scss\";\n\ntype IProps = {\n  disabled?: boolean;\n  onFilesAdded: (files: File[]) => void;\n  validationMessages?: string[];\n  multiple?: boolean;\n  accept?: string;\n  className?: string;\n};\n\nconst FileDropzoneComponent = (props: IProps) => {\n  let fileInputRef: any = React.useRef<HTMLInputElement>();\n\n  const [highlight, setHighlight] = React.useState<boolean>(false);\n\n  //#region 'File upload - Browse click'\n\n  const onFilesAdded = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    if (props.disabled) return;\n\n    if (e.target && e.target.files) {\n      props.onFilesAdded(Array.from(e.target.files));\n      return;\n    }\n    props.onFilesAdded([]);\n  };\n\n  const openFileDialog = () => {\n    if (props.disabled) {\n      return;\n    }\n    fileInputRef && fileInputRef.click();\n  };\n\n  //#endregion\n\n  //#region 'File drag n drop'\n\n  const onDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n\n    if (props.disabled) return;\n\n    setHighlight(true);\n  };\n\n  const onDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setHighlight(false);\n  };\n\n  const onDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n\n    if (props.disabled) return;\n\n    if (e.dataTransfer && e.dataTransfer.files) {\n      props.onFilesAdded(Array.from(e.dataTransfer.files));\n      setHighlight(false);\n      return;\n    }\n\n    props.onFilesAdded([]);\n    setHighlight(false);\n  };\n\n  //#endregion\n\n  return (\n    <div\n      className={`dropzone-wrapper ${props.className} ${\n        props.disabled ? \"disabled\" : \"\"\n      }`}\n    >\n      <div\n        className={`w-100 dropzone p-2 rounded d-flex flex-column justify-content-center align-items-center ${\n          highlight ? \"highlight\" : \"\"\n        }`}\n        onDragOver={onDragOver}\n        onDragLeave={onDragLeave}\n        onDrop={onDrop}\n      >\n        <input\n          ref={(el) => (fileInputRef = el)}\n          className=\"d-none\"\n          type=\"file\"\n          accept={props.accept ? props.accept : \"\"}\n          multiple={props.multiple ? true : false}\n          onChange={onFilesAdded}\n        />\n        <span className=\"pt-1\">\n          <i className=\"material-icons\">cloud_upload</i>\n        </span>\n        <p className=\"mb-0 pb-0\">Drag and drop</p>\n        <p className=\"mb-1\">or</p>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary w-25 mb-1\"\n          disabled={props.disabled}\n          onClick={openFileDialog}\n          style={{\n            cursor: props.disabled ? \"default\" : \"pointer\",\n          }}\n        >\n          Upload\n        </button>\n        {props.validationMessages && props.validationMessages.length\n          ? props.validationMessages.map((message: string, index: number) => {\n              return (\n                <small className=\"pb-1\" key={index}>\n                  {message}\n                </small>\n              );\n            })\n          : null}\n      </div>\n    </div>\n  );\n};\n\nexport default FileDropzoneComponent;\n","import React from \"react\";\nimport \"./Progress.scss\";\n\ntype IProps = {\n  progress: number;\n};\n\nconst ProgressComponent = (props: IProps) => {\n  return (\n    <div className=\"progress-bar-container w-100 rounded\">\n      <div\n        className=\"progress h-100 m-0 rounded\"\n        style={{ width: `${props.progress}%` }}\n      />\n    </div>\n  );\n};\n\nexport default ProgressComponent;\n","import axios, { AxiosInstance } from \"axios\";\n\nconst POST_FILE_UPLOAD = \"upload\";\n\nconst ApiService: AxiosInstance = axios.create({\n  baseURL: `${\n    process.env.NODE_ENV === \"development\"\n      ? \"http://localhost:7000/\"\n      : \"https://react-file-upload-service.herokuapp.com/\"\n  }`,\n});\n\nconst uploadFile = async (file: File, progressCb: any) => {\n  const config = {\n    onUploadProgress: function (progressEvent: any) {\n      var percentCompleted = Math.round(\n        (progressEvent.loaded * 100) / progressEvent.total\n      );\n\n      progressCb(percentCompleted, file.name);\n    },\n  };\n  let formData = new FormData();\n  formData.append(\"file\", file, file.name);\n\n  return ApiService.post(POST_FILE_UPLOAD, formData, config);\n};\n\nexport { uploadFile };\nexport default ApiService;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport FileDropzoneComponent from \"./file-dropzone/File-Dropzone\";\nimport ProgressComponent from \"./progress/Progress\";\nimport { uploadFile } from \"./App.service\";\n\ntype IFileModel = {\n  file: File;\n  status: \"Complete\" | \"None\" | \"Progress\" | \"Fail\";\n  uploadProgress: number;\n};\n\nfunction App() {\n  const [files, setFiles] = useState<IFileModel[]>([]);\n  const [uploadProgress, setUploadProgress] = useState<boolean>(false);\n\n  const onFileRemoveClick = (index: number) => {\n    const _files: IFileModel[] = [...files];\n    _files.splice(index, 1);\n    setFiles(_files);\n  };\n\n  const onFileUploadProgress = (progress: number, fileName: string) => {\n    const _files: IFileModel[] = [...files];\n    const _fileIndex: number = _files.findIndex(\n      (f: IFileModel) => f.file.name === fileName\n    );\n    if (_fileIndex !== -1) {\n      _files[_fileIndex].uploadProgress = 100;\n      _files[_fileIndex].status = \"Complete\";\n    }\n\n    setFiles(_files);\n  };\n\n  const renderFileUploadStatus = (file: IFileModel, index: number) => {\n    switch (file.status) {\n      case \"Complete\":\n        return (\n          <span>\n            <i style={{ color: \"#28a745\" }} className=\"material-icons\">\n              check_circle\n            </i>\n          </span>\n        );\n      case \"Fail\":\n        return (\n          <span>\n            <i style={{ color: \"#ff0000bf\" }} className=\"material-icons\">\n              error\n            </i>\n          </span>\n        );\n      case \"Progress\":\n        return (\n          <div className=\"w-25\">\n            <ProgressComponent progress={file.uploadProgress} />\n          </div>\n        );\n      case \"None\":\n        return (\n          <span\n            style={{\n              cursor: uploadProgress ? \"not-allowed\" : \"pointer\",\n            }}\n            onClick={() => onFileRemoveClick(index)}\n          >\n            <i className=\"material-icons\">delete</i>\n          </span>\n        );\n    }\n  };\n\n  const onFileUploadSubmitClick = () => {\n    try {\n      setUploadProgress(true);\n\n      const _notCompletedFiles: IFileModel[] = files.filter(\n        (file: IFileModel) => file.status === \"None\"\n      );\n\n      Promise.allSettled(\n        _notCompletedFiles.map(async (file: IFileModel, index: number) => {\n          const response: any = await uploadFile(\n            file.file,\n            onFileUploadProgress\n          );\n          return {\n            response,\n            file,\n          };\n        })\n      ).then((results: any[]) => {\n        let _files: IFileModel[] = [...files];\n\n        results.map((result: any) => {\n          if (result.status === \"fulfilled\") {\n            const _fileIndex: number = _files.findIndex(\n              (f: IFileModel) => f.file.name === result.value.file.file.name\n            );\n            if (_fileIndex !== -1) {\n              _files[_fileIndex].uploadProgress = 100;\n              _files[_fileIndex].status = \"Complete\";\n            }\n          }\n          return null;\n        });\n\n        setFiles(_files);\n      });\n\n      setUploadProgress(false);\n    } catch (error) {}\n  };\n\n  const filterUniqueFiles = (files: IFileModel[]) => {\n    let _files: IFileModel[] = [];\n\n    files.map((file: IFileModel) => {\n      if (!_files.some((_f: IFileModel) => _f.file.name === file.file.name)) {\n        _files.push(file);\n      }\n      return file;\n    });\n\n    return _files;\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col d-flex flex-column align-items-center\">\n          <h1 className=\"mt-4 mb-4 p-2\">File upload and dropzone</h1>\n          <section className=\"w-50 mt-2 mb-4\">\n            <FileDropzoneComponent\n              disabled={uploadProgress}\n              multiple={true}\n              onFilesAdded={(_files: File[]) => {\n                const newFiles: IFileModel[] = _files.map((f: File) => {\n                  return {\n                    file: f,\n                    status: \"None\",\n                    uploadProgress: 0,\n                  };\n                });\n                setFiles(filterUniqueFiles([...files, ...newFiles]));\n              }}\n            />\n          </section>\n          <section className=\"w-50 d-flex flex-column \">\n            {files.length ? (\n              <>\n                <div\n                  className=\"pt-2 pb-2 mb-3 border\"\n                  style={{ maxHeight: \"200px\", overflowY: \"auto\" }}\n                >\n                  {files.map((file: IFileModel, index: number) => {\n                    return (\n                      <div\n                        className=\"p-1 pl-2 pr-2 d-flex justify-content-between align-items-center\"\n                        key={index}\n                      >\n                        <span\n                          className=\"d-inline-block text-truncate\"\n                          style={{ maxWidth: \"300px\" }}\n                        >\n                          {file.file.name}\n                        </span>\n                        {renderFileUploadStatus(file, index)}\n                      </div>\n                    );\n                  })}\n                </div>\n                <div className=\"d-flex justify-content-around\">\n                  <button\n                    type=\"button\"\n                    disabled={uploadProgress}\n                    className=\"btn btn-danger w-25\"\n                    onClick={() => {\n                      setFiles([]);\n                    }}\n                  >\n                    Reset\n                  </button>\n                  <button\n                    type=\"button\"\n                    disabled={uploadProgress}\n                    className=\"btn btn-success w-25\"\n                    onClick={onFileUploadSubmitClick}\n                  >\n                    Submit\n                  </button>\n                </div>\n              </>\n            ) : null}\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}